{"ast":null,"code":"const shuffleArray = array => [...array].sort(() => Math.random() - 0.5);\n\nexport const getQuizDetails = async (totalQuestions, level) => {\n  const res = await fetch(`https://opentdb.com/api.php?amount=${totalQuestions}&difficulty=${level}&type=multiple`);\n  let {\n    results\n  } = await res.json();\n  const quiz = results.map(questionObj => {\n    return {\n      question: questionObj.question,\n      answer: questionObj.correct_answer,\n      correct_answer: questionObj.correct_answer,\n      option: shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))\n    };\n  });\n  return quiz;\n};","map":{"version":3,"sources":["/home/ubuntu/documents/demoapp/src/services/quiz_service.ts"],"names":["shuffleArray","array","sort","Math","random","getQuizDetails","totalQuestions","level","res","fetch","results","json","quiz","map","questionObj","question","answer","correct_answer","option","incorrect_answers","concat"],"mappings":"AAEA,MAAMA,YAAY,GAAIC,KAAD,IACjB,CAAC,GAAGA,KAAJ,EAAWC,IAAX,CAAgB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtC,CADJ;;AAGA,OAAO,MAAMC,cAAc,GAAG,OAAOC,cAAP,EAA+BC,KAA/B,KAAsE;AAChG,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,sCAAqCH,cAAe,eAAcC,KAAM,gBAA1E,CAAvB;AACA,MAAI;AAAEG,IAAAA;AAAF,MAAc,MAAMF,GAAG,CAACG,IAAJ,EAAxB;AACA,QAAMC,IAAgB,GAAGF,OAAO,CAACG,GAAR,CAAaC,WAAD,IAA+B;AAChE,WAAO;AACHC,MAAAA,QAAQ,EAAED,WAAW,CAACC,QADnB;AAEHC,MAAAA,MAAM,EAAEF,WAAW,CAACG,cAFjB;AAGHA,MAAAA,cAAc,EAAEH,WAAW,CAACG,cAHzB;AAIHC,MAAAA,MAAM,EAAElB,YAAY,CAACc,WAAW,CAACK,iBAAZ,CAA8BC,MAA9B,CAAqCN,WAAW,CAACG,cAAjD,CAAD;AAJjB,KAAP;AAMH,GAPwB,CAAzB;AAQA,SAAOL,IAAP;AACH,CAZM","sourcesContent":["import { QuestionType, QuizType } from './../Types/quiz_types';\n\nconst shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5)\n\nexport const getQuizDetails = async (totalQuestions: number, level: string): Promise<QuizType[]> => {\n    const res = await fetch(`https://opentdb.com/api.php?amount=${totalQuestions}&difficulty=${level}&type=multiple`);\n    let { results } = await res.json();\n    const quiz: QuizType[] = results.map((questionObj: QuestionType) => {\n        return {\n            question: questionObj.question,\n            answer: questionObj.correct_answer,\n            correct_answer: questionObj.correct_answer,\n            option: shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))\n        }\n    })\n    return quiz;\n}"]},"metadata":{},"sourceType":"module"}