{"ast":null,"code":"import _regeneratorRuntime from\"/home/ubuntu/documents/demoapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ubuntu/documents/demoapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/home/ubuntu/documents/demoapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";var shuffleArray=function shuffleArray(array){return _toConsumableArray(array).sort(function(){return Math.random()-0.5;});};export var getQuizDetails=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(totalQuestions,level){var res,_yield$res$json,results,quiz;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://opentdb.com/api.php?amount=\".concat(totalQuestions,\"&difficulty=\").concat(level,\"&type=multiple\"));case 2:res=_context.sent;_context.next=5;return res.json();case 5:_yield$res$json=_context.sent;results=_yield$res$json.results;quiz=results.map(function(questionObj){return{question:questionObj.question,answer:questionObj.correct_answer,correct_answer:questionObj.correct_answer,option:shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))};});return _context.abrupt(\"return\",quiz);case 9:case\"end\":return _context.stop();}}},_callee);}));return function getQuizDetails(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/home/ubuntu/documents/demoapp/src/services/quiz_service.ts"],"names":["shuffleArray","array","sort","Math","random","getQuizDetails","totalQuestions","level","fetch","res","json","results","quiz","map","questionObj","question","answer","correct_answer","option","incorrect_answers","concat"],"mappings":"ocAEA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,QACjB,oBAAIA,KAAJ,EAAWC,IAAX,CAAgB,iBAAMC,CAAAA,IAAI,CAACC,MAAL,GAAgB,GAAtB,EAAhB,CADiB,EAArB,CAGA,MAAO,IAAMC,CAAAA,cAAc,0FAAG,iBAAOC,cAAP,CAA+BC,KAA/B,6KACRC,CAAAA,KAAK,8CAAuCF,cAAvC,wBAAoEC,KAApE,mBADG,QACpBE,GADoB,qCAEFA,CAAAA,GAAG,CAACC,IAAJ,EAFE,sCAEpBC,OAFoB,iBAEpBA,OAFoB,CAGpBC,IAHoB,CAGDD,OAAO,CAACE,GAAR,CAAY,SAACC,WAAD,CAA+B,CAChE,MAAO,CACHC,QAAQ,CAAED,WAAW,CAACC,QADnB,CAEHC,MAAM,CAAEF,WAAW,CAACG,cAFjB,CAGHA,cAAc,CAAEH,WAAW,CAACG,cAHzB,CAIHC,MAAM,CAAElB,YAAY,CAACc,WAAW,CAACK,iBAAZ,CAA8BC,MAA9B,CAAqCN,WAAW,CAACG,cAAjD,CAAD,CAJjB,CAAP,CAMH,CAPwB,CAHC,iCAWnBL,IAXmB,wDAAH,kBAAdP,CAAAA,cAAc,gDAApB","sourcesContent":["import { QuestionType, QuizType } from './../Types/quiz_types';\n\nconst shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5)\n\nexport const getQuizDetails = async (totalQuestions: number, level: string): Promise<QuizType[]> => {\n    const res = await fetch(`https://opentdb.com/api.php?amount=${totalQuestions}&difficulty=${level}&type=multiple`);\n    let { results } = await res.json();\n    const quiz: QuizType[] = results.map((questionObj: QuestionType) => {\n        return {\n            question: questionObj.question,\n            answer: questionObj.correct_answer,\n            correct_answer: questionObj.correct_answer,\n            option: shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))\n        }\n    })\n    return quiz;\n}"]},"metadata":{},"sourceType":"module"}