{"version":3,"sources":["services/quiz_service.ts","components/QuestionCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getQuizDetails","totalQuestions","level","a","fetch","res","json","results","quiz","map","questionObj","question","answer","correct_answer","option","array","incorrect_answers","concat","sort","Math","random","QuestionCard","options","callback","useState","selectedAns","setSelectedAns","handleSelection","ev","target","value","className","onSubmit","e","opt","ind","key","type","name","required","checked","onChange","App","setQuiz","currentStep","setCurrentStep","score","setScore","showResult","setShowResult","useEffect","questions","fetchData","length","userAns","preventDefault","currentQuestion","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAKaA,EAAc,uCAAG,WAAOC,EAAwBC,GAA/B,qBAAAC,EAAA,sEACRC,MAAM,sCAAD,OAAuCH,EAAvC,uBAAoEC,EAApE,mBADG,cACpBG,EADoB,gBAEFA,EAAIC,OAFF,uBAEpBC,EAFoB,EAEpBA,QACAC,EAAmBD,EAAQE,KAAI,SAACC,GAClC,MAAO,CACHC,SAAUD,EAAYC,SACtBC,OAAQF,EAAYG,eACpBA,eAAgBH,EAAYG,eAC5BC,QAXUC,EAWWL,EAAYM,kBAAkBC,OAAOP,EAAYG,gBAV9E,YAAIE,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,QADrB,IAACL,KAGQ,kBAWnBP,GAXmB,2CAAH,wDCwCZa,EA1CmC,SAAC,GAAqC,IAAnCV,EAAkC,EAAlCA,SAAUW,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAAe,EAE/CC,mBAAS,IAFsC,mBAE9EC,EAF8E,KAEjEC,EAFiE,KAI7EC,EAAkB,SAACC,GACrBF,EAAeE,EAAGC,OAAOC,QAG7B,OACI,yBAAKC,UAAU,sBACX,yBAAKA,UAAU,YACX,4BAAKpB,IAGT,0BAAMqB,SAAU,SAACC,GAAD,OAAqCV,EAASU,EAAGR,IAC7DM,UAAU,iBAGNT,EAAQb,KAAI,SAACyB,EAAaC,GACtB,OACI,yBAAKC,IAAKD,GACN,2BAAOJ,UAAU,SACb,2BACIM,KAAK,QACLC,KAAK,MACLC,UAAQ,EACRT,MAAOI,EACPM,QAASf,IAAgBS,EACzBO,SAAUd,IAEbO,OAMrB,2BAAOG,KAAK,SAASN,UAAU,cC0BhCW,MA3Df,WAAgB,IAAD,EAESlB,mBAAqB,IAF9B,mBAERhB,EAFQ,KAEFmC,EAFE,OAGuBnB,mBAAS,GAHhC,mBAGRoB,EAHQ,KAGKC,EAHL,OAIWrB,mBAAS,GAJpB,mBAIRsB,EAJQ,KAIDC,EAJC,OAKqBvB,oBAAS,GAL9B,mBAKRwB,EALQ,KAKIC,EALJ,KAkCb,OA1BAC,qBAAU,WAAM,4CACd,4BAAA/C,EAAA,sEACsCH,EAAe,EAAG,QADxD,OACQmD,EADR,OAEER,EAAQQ,GAFV,4CADc,uBAAC,WAAD,wBAKdC,KACC,IAoBE5C,EAAK6C,OAGPL,EACO,yBAAKjB,UAAU,uCACrB,sCAEA,uBAAGA,UAAU,eAAb,qBAEI,+BAAKe,GAFT,WAE2B,2BAAItC,EAAK6C,UAKtC,yBAAKtB,UAAU,OACb,wCACA,kBAAC,EAAD,CACET,QAASd,EAAKoC,GAAa9B,OAC3BH,SAAUH,EAAKoC,GAAajC,SAC5BY,SArCe,SAACU,EAAiCqB,GACrDrB,EAAEsB,iBAEF,IAAMC,EAA4BhD,EAAKoC,GAEvCa,QAAQC,IAAI,gBAAkBF,EAAgB3C,eAAiB,oBAAsByC,GAEjFA,IAAYE,EAAgB3C,gBAC9BkC,IAAWD,GAGTF,IAAgBpC,EAAK6C,OAAS,EAChCR,IAAiBD,GAEjBK,GAAc,OAKT,2CC7BSU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.e19b8ff2.chunk.js","sourcesContent":["import { QuestionType, QuizType } from './../Types/quiz_types';\n\nconst shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5)\n\nexport const getQuizDetails = async (totalQuestions: number, level: string): Promise<QuizType[]> => {\n    const res = await fetch(`https://opentdb.com/api.php?amount=${totalQuestions}&difficulty=${level}&type=multiple`);\n    let { results } = await res.json();\n    const quiz: QuizType[] = results.map((questionObj: QuestionType) => {\n        return {\n            question: questionObj.question,\n            answer: questionObj.correct_answer,\n            correct_answer: questionObj.correct_answer,\n            option: shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))\n        }\n    })\n    return quiz;\n}","import React, { useState } from 'react';\nimport { questionPropsType } from './../Types/quiz_types'\n\nconst QuestionCard: React.FC<questionPropsType> = ({ question, options, callback }) => {\n\n    let [selectedAns, setSelectedAns] = useState(\"\");\n\n    const handleSelection = (ev: any) => {\n        setSelectedAns(ev.target.value);\n    }\n\n    return (\n        <div className=\"question-container\">\n            <div className=\"question\">\n                <h4>{question}</h4>\n            </div>\n\n            <form onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, selectedAns)}\n                className=\"question-form\"\n                >\n                {\n                    options.map((opt: string, ind: number) => {\n                        return (\n                            <div key={ind}>\n                                <label className=\"radio\">\n                                    <input\n                                        type=\"radio\"\n                                        name=\"opt\"\n                                        required\n                                        value={opt}\n                                        checked={selectedAns === opt}\n                                        onChange={handleSelection}\n                                    />\n                                    {opt}\n                                </label>\n                            </div>\n                        )\n                    })\n                }\n                <input type=\"submit\" className=\"submit\"/>\n            </form>\n        </div>\n    )\n}\n\nexport default QuestionCard;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { getQuizDetails } from './services/quiz_service';\nimport { QuizType } from './Types/quiz_types';\nimport QuestionCard from './components/QuestionCard';\n\nfunction App() {\n\n  let [quiz, setQuiz] = useState<QuizType[]>([])\n  let [currentStep, setCurrentStep] = useState(0)\n  let [score, setScore] = useState(0)\n  let [showResult, setShowResult] = useState(false)\n\n\n  useEffect(() => {\n    async function fetchData() {\n      const questions: QuizType[] = await getQuizDetails(5, 'easy');\n      setQuiz(questions)\n    }\n    fetchData();\n  }, []);\n\n  const handleSubmit = (e: React.FormEvent<EventTarget>, userAns: string) => {\n    e.preventDefault();\n\n    const currentQuestion: QuizType = quiz[currentStep];\n\n    console.log(\"correct And: \" + currentQuestion.correct_answer + \"--user Selection:\" + userAns)\n\n    if (userAns === currentQuestion.correct_answer) {\n      setScore(++score);\n    }\n\n    if (currentStep !== quiz.length - 1)\n      setCurrentStep(++currentStep);\n    else {\n      setShowResult(true);\n    }\n  }\n\n  if (!quiz.length)\n    return <h3>Loading.. </h3>\n\n  if(showResult){\n    return (<div className=\"question-container result-container\">\n      <h2>Result</h2>\n\n      <p className=\"result-text\">\n        You final score is \n          <b> {score}</b> out of <b>{quiz.length}</b>\n      </p>\n    </div>)\n  }\n  return (\n    <div className=\"App\">\n      <h1>Quiz App</h1>\n      <QuestionCard\n        options={quiz[currentStep].option}\n        question={quiz[currentStep].question}\n        callback={handleSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}